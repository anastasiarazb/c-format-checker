parse = statement*

statement = block
          | simple_expr
          | iteration_statement
          | selection_statement
          | labeled_statement
          
iteration_statement = FOR '(' word_sequence ';' word_sequence ';' word_sequence ')' statement
                    | WHILE '(' word_sequence ')' statement
                    | DO statement WHILE '(' word_sequence ')' ';'
                    
selection_statement = IF '(' word_sequence ')' statement (ELSE statement) ?
                    | SWITCH '(' word_sequence ')' statement

simple_statement = word_sequence SEMICOLON
                 | word_sequence // if word_sequence scanned function_definition

block = '{' statement* '}'

word =  lexem::LBRACKET,  // [
        lexem::RBRACKET,  // ]
        lexem::LANGLE,    // <
        lexem::RANGLE,    // >
        lexem::COLON,     // :
        lexem::COMMA,     // ,
        lexem::DOLLAR,    // $
        lexem::DOT,       // .
        lexem::ELLIPSIS,  // ...
        lexem::IDENT,     // [a-zA-Z_][a-zA-Z_0-9]*
        lexem::STRING,    // ".*"
        lexem::CHAR,      // '\n'
        lexem::NUM,       // [0-9a-fA-FuUlLxX]+(\.
        lexem::INC_DEC,   // ++, --
        lexem::OPERATOR,  // +, -, /, %, ~, |, ^, <<, >>, !, &&, ||
        lexem::ARROW,     // ->
        lexem::STAR,      // *
        lexem::ASSIGNOP,  // =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=
        lexem::COMPAREOP, // >, <, !=, <=, =>, ==
        lexem::AMPERSAND, // &
        lexem::QUESTIONMARK, // ?
        lexem::TYPENAME,
        lexem::TYPEDEF,
        lexem::KEYWORD,

word_sequence = (word | '(' word_sequence ')' | initializer_list | union_struct_enum_definition)*
              | function_definition
function_definition = word_sequence IDENT '(' word_sequence ')' block

initializer_list = '{' word_sequence '}'

label_statement = IDENT ':'
                | CASE word_sequence ':'
                | DEFAULT ':'
                
 union_struct_enum_definition = (STRUCT | UNION) IDENT? block
                             | (STRUCT | UNION) IDENT
                             | ENUM IDENT? initializer_list
                             | ENUM IDENT
